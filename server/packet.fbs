// https://google.github.io/flatbuffers/md__schemas.html

//include "typetick.fbs";

namespace IbPacket;


enum TickType:byte { 
    BID_SIZE=0,
    BID,
    ASK,
    ASK_SIZE,
    LAST,
    LAST_SIZE,
    HIGH,
    LOW,
    VOLUME,
    CLOSE,
    BID_OPTION_COMPUTATION,
    ASK_OPTION_COMPUTATION,
    LAST_OPTION_COMPUTATION,
    MODEL_OPTION,
    OPEN,
    LOW_13_WEEK,
    HIGH_13_WEEK,
    LOW_26_WEEK,
    HIGH_26_WEEK,
    LOW_52_WEEK,
    HIGH_52_WEEK,
    AVG_VOLUME,
    OPEN_INTEREST,
    OPTION_HISTORICAL_VOL,
    OPTION_IMPLIED_VOL,
    OPTION_BID_EXCH,
    OPTION_ASK_EXCH,
    OPTION_CALL_OPEN_INTEREST,
    OPTION_PUT_OPEN_INTEREST,
    OPTION_CALL_VOLUME,
    OPTION_PUT_VOLUME,
    INDEX_FUTURE_PREMIUM,
    BID_EXCH,
    ASK_EXCH,
    AUCTION_VOLUME,
    AUCTION_PRICE,
    AUCTION_IMBALANCE,
    MARK_PRICE,
    BID_EFP_COMPUTATION,
    ASK_EFP_COMPUTATION,
    LAST_EFP_COMPUTATION,
    OPEN_EFP_COMPUTATION,
    HIGH_EFP_COMPUTATION,
    LOW_EFP_COMPUTATION,
    CLOSE_EFP_COMPUTATION,
    LAST_TIMESTAMP,
    SHORTABLE,
    FUNDAMENTAL_RATIOS,
    RT_VOLUME,
    HALTED,
    BID_YIELD,
    ASK_YIELD,
    LAST_YIELD,
    CUST_OPTION_COMPUTATION,
    TRADE_COUNT,
    TRADE_RATE,
    VOLUME_RATE,
    LAST_RTH_TRADE,
    RT_HISTORICAL_VOL,
    IB_DIVIDENDS,
    BOND_FACTOR_MULTIPLIER,
    REGULATORY_IMBALANCE,
    NEWS_TICK,
    SHORT_TERM_VOLUME_3_MIN,
    SHORT_TERM_VOLUME_5_MIN,
    SHORT_TERM_VOLUME_10_MIN,
    DELAYED_BID,
    DELAYED_ASK,
    DELAYED_LAST,
    DELAYED_BID_SIZE,
    DELAYED_ASK_SIZE,
    DELAYED_LAST_SIZE,
    DELAYED_HIGH,
    DELAYED_LOW,
    DELAYED_VOLUME,
    DELAYED_CLOSE,
    DELAYED_OPEN,
    RT_TRD_VOLUME,
    CREDITMAN_MARK_PRICE,
    CREDITMAN_SLOW_MARK_PRICE,
    NOT_SET
}



union Data { Info, Scan, MktTickSz, MktTickPrc, MktTickStr, Tick }

enum Type:byte {
    Info=0,
    Scan=1,
    MktTickSz, MktTickPrc, MktTickStr,
    Tick
}

table Packet {
    type:Type;
    time: long;
//    payload: [Data];
    payload: Data;
}

table Info {
    name: string;
}

table ActiveScan {
    scans: [Scan];
}

table Scan {
    name: string;
    utime: ulong;
    symb:[string];        // Vector of structs.
}


table MktTickSz { // size
    field: TickType;
    size: uint;

    symbol: string;
    utime: ulong;
//    timestamp: string;
}


table MktTickPrc { // price
    field: TickType;
    price: double;
    canAutoExecute: bool;

    symbol: string;
    utime: ulong;
//    timestamp: string;
}

table MktTickStr { // string
    field: TickType;
    value: string;

    // 233 last trade price, last trade size, last trade time, total volume, VWAP, and single trade flag
    symbol: string;
    utime: ulong;
//    timestamp: string;
}

table Tick {
    symb: string;
    datetime: string;
    open: double;
    high: double;
    low: double;
    close: double;
    volume: ulong;
    wap: double;
    count: uint;
    //       bool hasgaps; // not used
}

root_type Packet;
